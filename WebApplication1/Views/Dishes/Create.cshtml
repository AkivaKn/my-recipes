@using MyRecipes.Models
@{
    ViewData["Title"] = "New Recipe";
    var units = ViewBag.Units as List<Unit>;
    var categories = ViewBag.Categories as List<Category>;
}

<div class="container mt-5">
    <div class="card">
        <div class="card-body">
            <h2 class="card-title">Add a New Recipe</h2>

            <form asp-action="Create" method="post" id="recipeForm">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="DishName">Dish Name</label>
                            <input type="text" id="DishName" name="DishName" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label for="DishDescription">Dish Description</label>
                            <textarea id="DishDescription" name="DishDescription" class="form-control"></textarea>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label for="category-dropdown" class="form-check-label">Categories</label>
                        <div class="dropdown" id="category-dropdown">
                            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Choose categories
                            </button>
                            <ul class="dropdown-menu">
                                @foreach (var category in categories)
                                {

                                    <li>
                                        <div class="form-check">
                                            <input class="form-check-input category-input" type="checkbox" value=@category.Id id=@category.CategoryName>
                                            <label class="form-check-label" for=@category.CategoryName>
                                                @category.CategoryName
                                            </label>
                                        </div>
                                    </li>
                                }

                            </ul>
                        </div>
                        <input type="hidden" id="categories" name="categories" class="form-control" value="[]" />
                        <div class="form-group">
                            <label for="Servings">Servings</label>
                            <input type="number" id="Servings" name="Servings" class="form-control" value="1" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" id="recipe-list">
                            <label>Sections:</label>
                            <ul id="recipes-list"></ul>
                            <label for="new-section-title">Title</label>
                            <div class="form-group" id="section-input">
                                <input type="text" id="new-section-title" name="new-section-title" class="form-control" placeholder="Enter title e.g. Dough" />
                                <ul class="ingredients-list"></ul>
                                <label for="new-ingredients">Ingredients</label>
                                <textarea id="new-ingredients" name="new-ingredients" class="form-control" placeholder="Enter one or multiple ingredients and press Enter"></textarea>
                                <button type="button" id="add-ingredients" class="btn btn-primary">Add Ingredients</button>
                            </div>
                            <input type="hidden" id="sections" name="sections" value="[]" />
                            <button type="button" id="add-section" class="btn btn-primary">Add Section</button>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" id="instructions-list">
                            <label>Instructions:</label>
                            <ul id="instruction-ul"></ul>
                            <textarea id="new-instructions" name="new-instructions" class="form-control" placeholder="Enter one or multiple instructions and press Enter"></textarea>
                            <button type="button" id="add-instructions" class="btn btn-primary">Add Instructions</button>
                            <input type="hidden" id="instructions" name="instructions" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label for="Notes">Notes</label>
                    <textarea id="Notes" name="Notes" class="form-control"></textarea>
                </div>
                <button type="submit" class="btn btn-success">Create Dish</button>
            </form>

        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var units = @Html.Raw(Json.Serialize(ViewBag.Units));

            $('input, textarea').keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    var $this = $(this);
                    var index = $('input, textarea').index($this);
                    $('input, textarea').eq(index + 1).focus();
                }
            });
            $(function () {
                $(".ingredients-list").sortable();
            });
            $(function () {
                $("#instruction-ul").sortable();
            });

            $('.category-input').change(
                function () {
                    let CategoryId = $(this).val();
                    if ($(this).is(':checked')) {
                        var newCategory = {
                            CategoryId
                        }
                        updateCategories(newCategory)
                    }
                    else {
                        deleteCategory(CategoryId)
                    }
                });
            function updateCategories(newCategory) {
                let categoriesArray;
                try {
                    categoriesArray = JSON.parse($('#categories').val());
                } catch (e) {
                    categoriesArray = [];
                }
                categoriesArray.push(newCategory);
                $('#categories').val(JSON.stringify(categoriesArray));
                console.log("Categories Updated: ", $('#categories').val());
            }
            function deleteCategory(categoryId) {
                let categoriesArray;
                try {
                    categoriesArray = JSON.parse($('#categories').val());
                } catch (e) {
                    categoriesArray = [];
                }
                var filteredCategories = categoriesArray.filter((category) => category?.CategoryId !== categoryId)
                $('#categories').val(JSON.stringify(filteredCategories));
                console.log("Categories Updated: ", $('#categories').val());
            }
            
            $('#add-ingredients').click(function () {
                const ingredientData = $('#new-ingredients').val();
                const ingredients = ingredientData.split('\n');
                ingredients.forEach((ingredient) => {
                    if (ingredient.trim() !== '') {
                        $('#section-input .ingredients-list').append(`<li class="ingredient">${ingredient}</li>`);
                        $('#new-ingredients').val('');
                    }
                })
            });
            $('#new-ingredients').keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $('#add-ingredients').click();
                }
            });
            $('#add-section').click(function () {
                var sectionTitle = $('#new-section-title').val() || "Main";
                $('#add-ingredients').click();
                var ingredientsList = $('#section-input .ingredients-list').clone();
                $('#recipes-list').append(`<li class="section">
                 <h5 class="section-title">${sectionTitle}</h5>
                          <ul class="ingredients-list">${ingredientsList.html()}</ul>
                 </li>`);
                $(function () {
                    $(".ingredients-list").sortable();
                });
                $('#new-section-title').val('');
                $('#section-input .ingredients-list').empty();
            });
           
            $('#recipeForm').submit(function (e) {
                $('#add-section').click();
                convertIngredientsToIngredientModel();
                updateSectionInput();
                var formData = $(this).serializeArray();
                updateInstructions();
                console.log("Form Data: ", formData);
            });
            function convertIngredientsToIngredientModel() {
                $('.ingredient').each(function () {
                    var ingredientValue = $(this).text();
                    var ingredientNumber = $(this).index();
                    let words = ingredientValue.split(' ');
                    let Quantity;
                    let IngredientName;
                    let UnitId;
                    let UnitName;
                    if (!isNaN(parseFloat(words[0]))) {
                        Quantity = parseFloat(words.shift());
                        IngredientName = words.join(' ');
                    } else {
                        IngredientName = ingredientValue;
                    }
                    words = IngredientName.split(' ');

                    for (var i = 0; i < units.length; i++) {
                        if (words[0] === units[i].unitName || words[0] === units[i].pluralName) {
                            UnitId = units[i].id;
                            UnitName = words[0];
                            IngredientName = words.slice(1).join(' ');
                            break;
                        }
                    }
                    var newIngredient = {
                        Quantity: Quantity || null,
                        IngredientName: IngredientName || "",
                        ingredientNumber: ingredientNumber || 0,
                        UnitId: UnitId || null,
                        UnitName: UnitName || ""
                    };
                    console.log(newIngredient, 'is the new ingredient')
                    $(this).text(JSON.stringify(newIngredient));
                })
            }
            function updateSectionInput() {
                var sectionsArray = [];
                $('.section').each(function () {
                    var sectionTitle = $(this).find('.section-title').text();
                    var ingredients = [];
                    $(this).find('.ingredient').each(function () {
                        console.log($(this).text(), 'is the new ingredient to add');
                        ingredients.push(JSON.parse($(this).text()));
                    })
                    var newSection = {
                        RecipeName: sectionTitle || 'Main',
                        Ingredients: ingredients
                    };
                    console.log(newSection, 'is new section')
                    if (ingredients.length > 0) {
                        sectionsArray.push(newSection)
                    }
                });
                console.log(sectionsArray, 'sections array');
                $('#sections').val(JSON.stringify(sectionsArray));
            }
            $('#add-instructions').click(function () {
                var instructionData = $('#new-instructions').val();
                var instructions = instructionData.split('\n');
                instructions.forEach((instruction) => {
                    if (instruction.trim() !== '') {
                        $('#instruction-ul').append('<li>' + instruction + '</li>');
                    }
                }
                )
                $('#new-instructions').val('');
            });

            $('#new-instructions').keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $('#add-instructions').click();
                }
            });

            function updateInstructions() {
                var instructionsArray = [];
                $('#instruction-ul li').each(function (index) {
                    instructionsArray.push({ InstructionNumber: index + 1, InstructionBody: $(this).text() });
                });
                $('#instructions').val(JSON.stringify(instructionsArray));
            }
        });
    </script>
}
