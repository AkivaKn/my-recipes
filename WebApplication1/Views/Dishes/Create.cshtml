@using MyRecipes.Models
@model MyRecipes.ViewModels.DishForm
@{
    ViewData["Title"] = "New Recipe";
    var units = ViewBag.Units as List<Unit>;
    var categories = ViewBag.Categories as List<Category>;
}

<div class="container mt-5">
    <div class="card">
        <div class="card-body">
            <h2 class="card-title">Add a New Recipe</h2>

            <form asp-action="Create" method="post" id="recipeForm">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="DishName">Title</label>
                            <input asp-for="DishName" class="form-control" />
                            <span asp-validation-for="DishName" class="text-danger"></span>

                        </div>
                        <div class="form-group">
                            <label asp-for="DishDescription">Dish Description</label>
                            <textarea asp-for="DishDescription" class="form-control"></textarea>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label for="category-dropdown" class="form-check-label">Categories</label>
                        <div class="dropdown" id="category-dropdown">
                            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Choose categories
                            </button>
                            <ul class="dropdown-menu">
                                @foreach (var category in categories)
                                {

                                    <li>
                                        <div class="form-check">
                                            <input class="form-check-input category-input" type="checkbox" value=@category.Id >
                                            <label class="form-check-label" for=@category.Id>
                                                @category.CategoryName
                                            </label>
                                        </div>
                                    </li>
                                }

                            </ul>
                        </div>
                        <input type="hidden" id="categories" asp-for="CategoriesJson" class="form-control" />
                        <div class="form-group">
                            <label asp-for="Servings">Servings</label>
                            <input type="number" asp-for="Servings" class="form-control" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" id="recipe-list">
                            <label>Sections:</label>
                            <ul id="recipes-list"></ul>
                            <label for="new-recipe-title">Title</label>
                            <div class="form-group" id="recipe-input">
                                <input type="text" id="new-recipe-title" name="new-recipe-title" class="form-control" placeholder="Enter title e.g. Dough" />
                                <ul class="ingredients-list"></ul>
                                <label for="new-ingredients">Ingredients</label>
                                <textarea id="new-ingredients" name="new-ingredients" class="form-control" placeholder="Enter one or multiple ingredients and press Enter"></textarea>
                                <button type="button" id="add-ingredients" class="btn btn-primary">Add Ingredients</button>
                            </div>
                            <input type="hidden" id="recipes" asp-for="RecipesJson" />
                            <button type="button" id="add-recipe" class="btn btn-primary">Add Section</button>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" id="instructions-list">
                            <label>Instructions:</label>
                            <ul id="instruction-ul"></ul>
                            <textarea id="new-instructions" name="new-instructions" class="form-control" placeholder="Enter one or multiple instructions and press Enter"></textarea>
                            <button type="button" id="add-instructions" class="btn btn-primary">Add Instructions</button>
                            <input type="hidden" id="Instructions" asp-for="InstructionsJson" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label asp-for="Notes">Notes</label>
                    <textarea asp-for="Notes" class="form-control"></textarea>
                </div>
                <button type="submit" class="btn btn-success">Create Dish</button>
            </form>

        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const units = @Html.Raw(Json.Serialize(ViewBag.Units));
            checkForExistingFormData();
            function checkForExistingFormData(){
            const formCategories = JSON.parse($('#categories').val());
            if (formCategories.length > 0){
                $('.category-input').each(function (){
                     const categoryId = $(this).val();
                      const found = formCategories.some(category => category.CategoryId === categoryId);
        if (found) {
            $(this).prop('checked', true);
        }
                })
            }
            const formInstructions = JSON.parse($('#Instructions').val());
              formInstructions.forEach((instruction) => {
                    if (instruction.InstructionBody.trim() !== '') {
                        $('#instruction-ul').append('<li class="instruction">' + instruction.InstructionBody + '</li>');
                    }
                }
                )

                $('.instruction').on("click", function () {
                    editCurrentTextAreaField($(this));
                })
                const formRecipes = JSON.parse($('#recipes').val());
                formRecipes.forEach((recipe) => {
        const recipeTitle = recipe.RecipeName || 'Main';
        const ingredients = recipe.Ingredients || [];
         let ingredientsHTML = '';
        ingredients.forEach((ingredient) => {
            const unit = units.find(u => u.id === ingredient.UnitId);
            const unitName = unit ? unit.unitName : ''; 
            const ingredientText = `${ingredient.Quantity || ''} ${unitName} ${ingredient.IngredientName || ''}`;
            ingredientsHTML += `<li class="ingredient">${ingredientText}</li>`;
        });

          $('#recipes-list').append(`<li class="recipe">
                                                 <h5 class="recipe-title">${recipeTitle}</h5>
                                                          <ul class="ingredients-list">${ingredientsHTML}</ul>
                                                 </li>`)


        
    });
     $('.ingredient').on("click", function () {
                    editCurrentInputField($(this));
                })
                $('.recipe-title').on("click", function () {
                    editCurrentInputField($(this));
                })
     $(function () {
        $(".ingredients-list").sortable();
        $("#recipes-list").sortable();
    });
            }
            $('#recipeForm').submit(function (e) {
                $('#add-recipe').click();
                updateRecipeInput();
                updateInstructions();
                const formData = $(this).serializeArray();
                console.log("Form Data: ", formData);
            });
            $('input, textarea').keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    const $this = $(this);
                    const index = $('input, textarea').index($this);
                    $('input, textarea').eq(index + 1).focus();
                }
            });
            $(function () {
                $(".ingredients-list").sortable();
            });
            $(function () {
                $("#instruction-ul").sortable();
            });
            function editCurrentInputField(currentField) {
                if (currentField.find('input').length > 0) {
                    return;
                }
                const currentFieldText = currentField.html();
                currentField.html('');
                currentField.append(`<input type="text" value="${currentFieldText}" />`);
                const input = currentField.find('input');
                input.focus().select();
                input.on('keypress', function (e) {
                    if (e.which === 13) {
                        e.preventDefault();
                        updateInputField($(this));
                    }
                });
                input.on('blur', function () {
                    updateInputField($(this));
                });
            }
            function updateInputField(input) {
                const newValue = input.val();
                const fieldItem = input.closest('.ingredient,.section-title');
                fieldItem.html(newValue);
            }
            function editCurrentTextAreaField(currentField) {
                if (currentField.find('textarea').length > 0) {
                    return;
                }
                const currentFieldText = currentField.html();
                currentField.html('');
                currentField.append('<textarea>' + currentFieldText + '</textarea>');
                const textarea = currentField.find('textarea');
                textarea.focus().select();
                textarea.on('keypress', function (e) {
                    if (e.which === 13) {
                        e.preventDefault();
                        updateTextAreaField($(this));
                    }
                });
                textarea.on('blur', function () {
                    updateTextAreaField($(this));
                });
            }
            function updateTextAreaField(textarea) {
                const newValue = textarea.val();
                const fieldItem = textarea.closest('.instruction');
                fieldItem.html(newValue);
            }
            $('.category-input').change(
                function () {
                    let CategoryId = $(this).val();
                    if ($(this).is(':checked')) {
                        const newCategory = {
                            CategoryId
                        }
                        updateCategories(newCategory)
                    }
                    else {
                        deleteCategory(CategoryId)
                    }
                });
            function updateCategories(newCategory) {
                let categoriesArray;
                try {
                    categoriesArray = JSON.parse($('#categories').val());
                } catch (e) {
                    categoriesArray = [];
                }
                categoriesArray.push(newCategory);
                $('#categories').val(JSON.stringify(categoriesArray));
            }
            function deleteCategory(categoryId) {
                let categoriesArray;
                try {
                    categoriesArray = JSON.parse($('#categories').val());
                } catch (e) {
                    categoriesArray = [];
                }
                const filteredCategories = categoriesArray.filter((category) => category?.CategoryId !== categoryId)
                $('#categories').val(JSON.stringify(filteredCategories));
            }

            $('#add-ingredients').click(function () {
                const ingredientData = $('#new-ingredients').val();
                const ingredients = ingredientData.split('\n');
                ingredients.forEach((ingredient) => {
                    if (ingredient.trim() !== '') {
                        $('#recipe-input .ingredients-list').append(`<li class="ingredient">${ingredient}</li>`);
                        $('#new-ingredients').val('');
                    }
                })
                $('.ingredient').on("click", function () {
                    editCurrentInputField($(this));
                })

            });
            $('#new-ingredients').keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $('#add-ingredients').click();
                }
            });

            $('#add-recipe').click(function () {
                const recipeTitle = $('#new-recipe-title').val() || "Main";
                $('#add-ingredients').click();
                const ingredientsList = $('#recipe-input .ingredients-list').clone();
                $('#recipes-list').append(`<li class="recipe">
                                                 <h5 class="recipe-title">${recipeTitle}</h5>
                                                          <ul class="ingredients-list">${ingredientsList.html()}</ul>
                                                 </li>`);
                $(function () {
                    $(".ingredients-list").sortable();
                });
                $('#new-recipe-title').val('');
                $('#recipe-input .ingredients-list').empty();
                $('.ingredient').on("click", function () {
                    editCurrentInputField($(this));
                })
                $('.recipe-title').on("click", function () {
                    editCurrentInputField($(this));
                })
            });
            function convertAsciiToNumber(char) {
                switch (char) {
                    case 188:
                        return '.25';
                    case 189:
                        return '.5';
                    case 190:
                        return '.75';
                    default:
                        return null;
                }
            }
            function convertFractionToNumber(word) {
                switch (word) {
                    case '1/4':
                        return '.25';
                    case '1/3':
                        return '.33';
                    case '1/2':
                        return '.5';
                    case '2/3':
                        return '.67';
                    case '3/4':
                        return '.75';
                    default:
                        return null;
                }
            }
            function convertIngredientToIngredientModel(ingredientValue, ingredientNumber) {
                if (ingredientValue === '') {
                    return;
                }
                const asciiLookup = [188, 189, 190];
                const fractionLookup = ['1/4', '1/3', '1/2', '2/3', '3/4']
                let words = ingredientValue.split(' ');
                let Quantity;
                let IngredientName;
                let UnitId;
                let UnitName;
                let firstWordCharacters = words[0].split('');

                const firstWordNumericCharacters = [];
                const firstThreeCharacters = firstWordCharacters.slice(0, 3).join('');
                let j = 0;
                let k = 0;
                if (fractionLookup.includes(firstThreeCharacters)) {
                    const characters = convertFractionToNumber(firstThreeCharacters).split('');
                    characters.forEach((char) => {
                        firstWordNumericCharacters.push(char);
                    })
                    j = 3;
                    k = 3;
                }
                for (let i = j; i < firstWordCharacters.length; i++) {
                    let char = firstWordCharacters[i];
                    if (!isNaN(parseInt(char))) {
                        firstWordNumericCharacters.push(char);
                        k++;
                    } else if (asciiLookup.includes(char.charCodeAt(0))) {
                        const convertedChar = convertAsciiToNumber(char.charCodeAt(0));
                        firstWordNumericCharacters.push(convertedChar);
                        k++;
                    } else {
                        break;
                    }
                }
                if (firstWordNumericCharacters.length > 0) {
                    firstWordCharacters = firstWordCharacters.slice(k);
                    if (firstWordCharacters.length === 0 && asciiLookup.includes(words[1].charCodeAt(0))) {
                        const convertedChar = convertAsciiToNumber(words[1].charCodeAt(0));
                        firstWordNumericCharacters.push(convertedChar);
                        if (words[1].length > 1) {
                            words[1] = words[1].slice(1);
                        } else {
                            words.shift();
                        }
                    } else if (firstWordCharacters.length == 0 && fractionLookup.includes(words[1])) {
                        const convertedWord = convertFractionToNumber(words[1]);
                        firstWordNumericCharacters.push(convertedWord);
                        words.shift();
                    } else if (firstWordCharacters.length == 0 && fractionLookup.includes(words[1].slice(0, 3))) {
                        const convertedWord = convertFractionToNumber(words[1].slice(0, 3));
                        firstWordNumericCharacters.push(convertedWord);
                        words[1] = words[1].slice(3);
                    }
                    if (firstWordCharacters.length > 0) {
                        words[0] = firstWordCharacters.join('');
                    } else {
                        words.shift()
                    }
                    Quantity = parseFloat(firstWordNumericCharacters.join(''));
                    IngredientName = words.join(' ');
                } else {
                    IngredientName = ingredientValue;
                }


                words = IngredientName.split(' ');
                for (let i = 0; i < units.length; i++) {
                    if (words[0] === units[i].unitName || words[0] === units[i].pluralName || units[i].alternativeSpellings?.includes(words[0])) {
                        UnitId = units[i].id;
                        UnitName = words[0];
                        IngredientName = words.slice(1).join(' ');
                        break;
                    }
                }
                const newIngredient = {
                    Quantity: Quantity || null,
                    IngredientName: IngredientName || "",
                    IngredientNumber: ingredientNumber || 0,
                    UnitId: UnitId || null,
                    UnitName: UnitName || ""
                }
                return newIngredient;
            }





            function updateRecipeInput() {
                const recipesArray = [];
                $('.recipe').each(function () {
                    const recipeTitle = $(this).find('.recipe-title').text();
                    const ingredients = [];
                    $(this).find('.ingredient').each(function () {
                        const convertedIngredient = convertIngredientToIngredientModel($(this).text(), $(this).index());
                        ingredients.push(convertedIngredient);
                    })

                    if (ingredients.length > 0) {
                        const newRecipe = {
                            RecipeName: recipeTitle || 'Main',
                            Ingredients: ingredients
                        };
                        recipesArray.push(newRecipe)
                    }
                });
                $('#recipes').val(JSON.stringify(recipesArray));
            }
            $('#add-instructions').click(function () {
                const instructionData = $('#new-instructions').val();
                const instructions = instructionData.split('\n');
                instructions.forEach((instruction) => {
                    if (instruction.trim() !== '') {
                        $('#instruction-ul').append('<li class="instruction">' + instruction + '</li>');
                    }
                }
                )
                $('#new-instructions').val('');
                $('.instruction').on("click", function () {
                    editCurrentTextAreaField($(this));
                })
            });

            $('#new-instructions').keypress(function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    $('#add-instructions').click();
                }
            });

            function updateInstructions() {
                $('#add-instructions').click();
                const instructionsArray = [];
                $('#instruction-ul li').each(function (index) {
                    instructionsArray.push({ InstructionNumber: index + 1, InstructionBody: $(this).text() });
                });
                $('#Instructions').val(JSON.stringify(instructionsArray));

            }
        });
    </script>
}